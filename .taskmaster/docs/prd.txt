# Oracle Cloud Infrastructure (OCI) Terraform Setup - Product Requirements Document

## Project Overview
Deploy a complete Oracle Cloud Infrastructure (OCI) environment using Terraform, maximizing the Oracle Always Free Tier resources. The project focuses on core infrastructure components including databases, compute instances, networking, and storage.

## Business Objectives
- Automate the complete setup of OCI CLI and Terraform configuration
- Deploy maximum Oracle Always Free Tier resources efficiently
- Ensure reliable, repeatable infrastructure deployment
- Provide comprehensive database services (ATP, ADW, MySQL, PostgreSQL, NoSQL)
- Optimize storage allocation across 200GB free tier limit
- Enable both interactive and non-interactive deployment modes

## Technical Requirements

### 1. Authentication & Setup
- Install and configure OCI CLI with browser-based authentication
- Generate SSH key pairs for instance access
- Create Terraform provider configuration
- Validate connectivity and permissions

### 2. Compute Infrastructure
- Deploy 2x AMD x86 micro instances (VM.Standard.E2.1.Micro)
- Deploy configurable ARM instances (VM.Standard.A1.Flex)
- Configure custom hostnames for all instances
- Implement cloud-init for instance initialization
- Install essential packages (Docker, Nginx, development tools)

### 3. Database Services
- Autonomous Transaction Processing (ATP) database
- Autonomous Data Warehouse (ADW) database  
- MySQL database (50GB)
- MySQL HeatWave database (50GB)
- PostgreSQL database (50GB)
- NoSQL database with configurable table count (up to 3 tables, 25GB each)

### 4. Networking Infrastructure
- Virtual Cloud Network (VCN) with proper CIDR allocation
- Public subnet with internet access
- Internet Gateway for external connectivity
- Route tables with appropriate routing rules
- Security lists with SSH, HTTP, HTTPS, and ICMP access
- Network Security Groups for additional security

### 5. Storage Management
- Optimize 200GB total storage allocation across boot volumes
- Configure boot volumes for optimal performance
- Optional block volumes (set to 0 by default for performance)
- Implement storage validation checks

### 6. Deployment Automation
- Complete Terraform workflow (init, plan, apply)
- Resource import capabilities for existing infrastructure
- Non-interactive mode support for CI/CD
- Comprehensive error handling and validation
- Resource cleanup and management options

### 7. Configuration Management
- Dynamic image OCID fetching per region
- Flexible ARM instance configuration options
- Database password validation and security
- Terraform state management
- Backup and recovery procedures

## User Experience Requirements
- Interactive configuration with sensible defaults
- Non-interactive mode for automation
- Clear progress indicators and status messages
- Comprehensive error messages with troubleshooting guidance
- Resource summary and deployment verification

## Security Requirements
- Secure SSH key generation and management
- Database password complexity validation
- Network security list configuration
- Authentication token management
- Resource tagging for organization

## Performance Requirements
- Efficient resource allocation within free tier limits
- Boot volume optimization over block volumes
- Parallel resource deployment where possible
- Minimal deployment time and resource conflicts

## Validation & Testing
- Terraform configuration validation
- Resource dependency verification
- Connectivity testing
- Database service validation
- Instance accessibility verification

## Success Criteria
- Complete OCI infrastructure deployment within free tier limits
- All database services operational and accessible
- Compute instances accessible via SSH
- Terraform state properly managed
- No resource conflicts or deployment failures
- Full automation capability for repeated deployments 